#!/usr/bin/env bash
set -e
set -o noclobber
set -o pipefail

readonly USERNAME="toh995"

# IF REMOVING A PACKAGE,
# SEARCH THE REST OF THIS SCRIPT
readonly -a DEFAULT_PACKAGES=(
	# x11
	xorg-server
	xorg-xinit

	# networking
	networkmanager

	# sound
	jack2

	# window manager
	i3-gaps
	dmenu

	# terminal emulator
	alacritty
	# rxvt-unicode

	# firefox font
	noto-fonts

	# apps
	firefox

	# commandline utilities
	git
	man-db
	nnn
	sudo
	zoxide
	zsh

	# powerlevel10k (leave these commented out)
	# they are installed in a separate function
	# zsh-theme-powerlevel10k-git
	# ttf-meslo-nerd-font-powerlevel10k
)


####################
# HELPER FUNCTIONS #
####################
command_exists() {
	local -r command="${1}"
	if type "${command}" &>/dev/null; then
		return 0
	else
		return 1
	fi
}

install_packages() {
	if command_exists "yay"; then
		yay -S "${@}"
	else
		pacman -S "${@}"
	fi
}

user_exists() {
	local -r username="${1}"
	# silent, it just sets the exit code
	id "${username}" &>/dev/null
}

get_home_dir() {
	local -r username="${1}"
	echo "$( eval echo "~${username}" )"
}

run_as_user() {
	local -r user="${1}"
	local -r script="${2}"
	sudo -u "${user}" \
		bash -c -i "${script}"
}


##################
# MAIN FUNCTIONS #
##################
upgrade_all_packages() {
	pacman -Syu
}

setup_sudo() {
	local -r OVERRIDE_FILE_PATH="/etc/sudoers.d/override"

	install_packages "sudo"

	{
		echo "Defaults passwd_timeout=0"
		echo "Defaults timestamp_timeout=30"
		echo "Defaults insults"
		echo ""
		echo "%wheel ALL=(ALL:ALL) ALL"
	} > "${OVERRIDE_FILE_PATH}"

	# double check that the file is correct
	visudo --check --file="${OVERRIDE_FILE_PATH}"
}

clean_new_user_skeleton() {
	# hack, return a success code,
	# b/c removing `.` and `..` results in error code
	rm /etc/skel/.* 2> /dev/null \
		|| return 0
}

create_user() {
	local -r username="${1}"
	local -r home_dir="/home/${username}"

	install_packages "zsh"

	echo "Creating new user ${username}..."
	useradd --create-home --gid=users --groups=wheel --shell=/usr/bin/zsh "${username}"
	passwd "${username}" # todo: what if the user typos the password input?
}

yay_install_setup() {
	local -r username="${1}"
	pacman -S --needed git base-devel

	# install yay
	run_as_user "${username}" \
		"
			set -e
			cd /tmp
			git clone https://aur.archlinux.org/yay.git
			cd yay
			makepkg -si
		"

	# once yay is installed, perform some housekeeping
	yay -Y --gendb
	yay -Syu --devel
	yay -Y --devel --save
}

install_powerlevel10k() {
	local -r username="${1}"
	run_as_user "${username}" \
		"yay -S \
			zsh-theme-powerlevel10k-git \
			ttf-meslo-nerd-font-powerlevel10k
		"
}

configure_networkmanager() {
	systemctl enable NetworkManager.service
}

configure_autologin() {
	local -r username="${1}"
	local -r dir_name="/etc/systemd/system/getty@tty1.service.d"
	local -r file_path="${dir_name}/autologin.conf"

	mkdir -p "${dir_name}"
	{
		echo "[Service]"
		echo "ExecStart="
		echo "ExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin ${username} - \$TERM"
	} > "${file_path}"
}

setup_git_bare_repo() {
	local -r username="${1}"
	local -r user_home="$( get_home_dir "${username}" )"
	local -r repo_dir="${user_home}/.dotfiles"
	local -r repo_url="https://github.com/toh995/dotfiles.git"

	run_as_user "$username" \
		"
			set -e
			mkdir -p ${repo_dir}
			git clone --bare ${repo_url} ${repo_dir}
			alias dot=\"git --git-dir=${repo_dir} --work-tree=${user_home}\"
			dot checkout
			dot config --local status.showUntrackedFiles no
		"
}

setup_git_profile() {
	local -r username="${1}"
	local name
	local email

	read -p "Enter your git name: " name
	read -p "Enter your git email: " email

	local -r home_dir="$( get_home_dir "${username}" )"
	local -r directory="${home_dir}/.config/git"
	local -r filepath="${directory}/profile"

	run_as_user "${username}" \
		"
			set -e

			# ensure the profile exists
			if [[ ! -f ${filepath} ]]; then
				mkdir -p ${directory}
				touch ${filepath}
			fi

			# write to the profile
			{
				echo '[user]'
				echo '	name = ${name}'
				echo '	email = ${email}'
			} >> ${filepath}
		"
}

remove_orphaned_packages() {
	local command
	if command_exists "yay"; then
		command="yay"
	else
		command="pacman"
	fi

	("${command}" -Qtdq | "${command}" -Rns --noconfirm - 2&>/dev/null) || true
}

########
# MAIN #
########
main() {
	upgrade_all_packages
	setup_sudo
	clean_new_user_skeleton
	user_exists "${USERNAME}" || create_user "${USERNAME}"
	yay_install_setup "${USERNAME}"
	install_packages "${DEFAULT_PACKAGES[@]}"
	install_powerlevel10k "${USERNAME}"
	configure_networkmanager
	configure_autologin "${USERNAME}"
	setup_git_profile "${USERNAME}"
	setup_git_bare_repo "${USERNAME}"
	remove_orphaned_packages

	echo "Set up is complete! Please reboot."
}
main "${@}"
